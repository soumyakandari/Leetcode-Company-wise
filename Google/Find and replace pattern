Given a list of strings words and a string pattern, return a list of words[i] that match pattern. You may return the answer in any order.

A word matches the pattern if there exists a permutation of letters p so that after replacing every letter x in the pattern with p(x), we get the desired word.

Recall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter.

Input: words = ["abc","deq","mee","aqq","dkd","ccc"], pattern = "abb"
Output: ["mee","aqq"]
Explanation: "mee" matches the pattern because there is a permutation {a -> m, b -> e, ...}. 
"ccc" does not match the pattern because {a -> c, b -> c, ...} is not a permutation, since a and b map to the same letter.

#USING HASHMAPS
 JAVA CODE-
 class Solution {
    public List<String> findAndReplacePattern(String[] words, String pattern) {
        List<String> res= new ArrayList<>();
        for(String str:words)
        {
            if(cantransform(str,pattern))
                res.add(str);   
        }
        return res;
    }
    public boolean cantransform(String str,String pattern)
    {
        //hashmaps
        Map<Character,Character> m1= new HashMap<>(); // from string to pattern
         Map<Character,Character> m2= new HashMap<>(); //pattern to str
        
        for(int i=0;i<str.length();i++)
        {
            char w= str.charAt(i);
            char p= pattern.charAt(i);
            
            if(!m1.containsKey(w))
                  m1.put(w,p);
             if(!m2.containsKey(p))
                  m2.put(p,w);
            
            //check if both maps are same
            if(m1.get(w)!=p || m2.get(p)!=w)
                return false;
        }
        return true;
    }
}
