On a 2D plane, we place n stones at some integer coordinate points. Each coordinate point may have at most one stone.

A stone can be removed if it shares either the same row or the same column as another stone that has not been removed.

Given an array stones of length n where stones[i] = [xi, yi] represents the location of the ith stone, return the largest possible number of stones that can be removed.

Input: stones = [[0,0],[0,1],[1,0],[1,2],[2,1],[2,2]]
Output: 5
Explanation: One way to remove 5 stones is as follows:
1. Remove stone [2,2] because it shares the same row as [2,1].
2. Remove stone [2,1] because it shares the same column as [0,1].
3. Remove stone [1,2] because it shares the same row as [1,0].
4. Remove stone [1,0] because it shares the same column as [0,0].
5. Remove stone [0,1] because it shares the same row as [0,0].
Stone [0,0] cannot be removed since it does not share a row/column with another stone still on the plane.

#USING THE NO. OF ISLANDS CONCEPTS

ALGO -
1. ans will be the total stones - no.ofislands(connected stones)
2. in order to find connected stones , maintain a hashset to check if stone is visited or not
3. if not visited make a dfs call for the stone and check if it has same row or column

T.C -O(N)
S.C -O(N)

JAVA CODE-
class solution{
   public int  removestones(int[][] stones){
      //set to check visited or not
      HashSet<int[]> set= new HashSet<>();
      int numofislands=0; //connected stones
      for(int [] s1:stones)
         {
            //check if not visited
              if(!set.contaisn(s1))
                 {
                     //dfs calls
                     dfs(s1,stones,set)
                     numofislands++;
                  }
           }
      return stones.length- numofislands;
     }
   public void dfs(int [] s1, int[][]stones,HashSet<int[]> set){
         //add the stone to the set
         set.add(s1);
         for(int[] s2:stones)
            {
                //if not visited
                if(!set.contains(s2))
                   {
                      //check if it has same row or column
                      if(s1[0]==s2[0] || s1[1]==s2[1])
                         { //make the dfs calls
                             dfs(s2,stones,set);
                              //with the updated stone to check
                           }
                     }
                }
                
        }
     }
                 
                  
