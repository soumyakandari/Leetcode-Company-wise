Given the head of a linked list, return the list after sorting it in ascending order.
Follow up: Can you sort the linked list in O(n logn) time and O(1) memory (i.e. constant space)?

Input: head = [4,2,1,3]
Output: [1,2,3,4]


USING MERGE SORT
DIVIDE AND CONQUER

T.C=O(NLOGN)
S.C-O(N)

JAVA CODE=

class Solution {
    public ListNode sortList(ListNode head) {
        if(head==null ||head.next==null)
              return head;
        //nodes to divide the ll
        ListNode temp=head;
        ListNode slow= head;
        ListNode fast=head;
        
        //to split the LL into two half
        while(fast!=null &&fast.next!=null)
        {
            temp=slow;
            slow=slow.next; //1 step
            fast=fast.next.next;
        }
        
        temp.next=null; //now they are two diff. halfs
        ListNode left_side= sortList(head);  
        ListNode right_side =sortList(slow);
        
        
        return merge(left_side,right_side);
    }
    public ListNode merge(ListNode l1,ListNode l2)
    {
        //new LL to store the merge val
        ListNode sorted= new ListNode(0);
        ListNode current = sorted;
        
        while(l1!=null &&l2!=null)
        {
            //add the smaller one to the new node
            if(l1.val<l2.val)
            {
                current.next=l1;
                l1=l1.next;
            }
            else
            {
                current.next=l2;
                l2=l2.next;
            }
            current=current.next;
            
        }
        
        if(l1!=null)
        { current.next=l1;
         l1=l1.next;
        }
        if(l2!=null)
        {
                current.next=l2;
                l2=l2.next;
            }
        
        return sorted.next;
    
    }
}
